{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","FindMovie","addMovie","useState","searchingTitle","setSearchingTitle","newMovie","setNewMovie","sameFilm","setSameFilm","errorLoad","setErrorLoad","emptyForm","setEmptyForm","clearForm","loadFilm","a","url","fetch","then","response","json","film","Title","Plot","imdbID","Poster","Response","htmlFor","type","id","placeholder","value","onChange","e","target","onClick","some","prev","style","color","fontSize","App","data","setMovies","ReactDOM","render","document","getElementById"],"mappings":"0wEAIaA,G,kBAAY,SAAC,GAAD,IACvBC,EADuB,EACvBA,MADuB,IAEvBC,mBAFuB,MAET,GAFS,EAGvBC,EAHuB,EAGvBA,OACAC,EAJuB,EAIvBA,QAJuB,OAMvB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,iBAChB,yBACEC,IAAKH,EACLI,IAAI,gBAIV,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBACEC,IAAI,wBACJC,IAAI,WAIV,yBAAKF,UAAU,iBACb,uBAAGA,UAAU,cAAcJ,KAI/B,yBAAKI,UAAU,WACZH,EACD,6BACA,uBAAGM,KAAMJ,GAAT,aC/BKK,EAAa,SAAC,GAAD,QACxBC,cADwB,MACf,GADe,SAGxB,yBAAKL,UAAU,UACZK,EAAOC,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,eAAWC,IAAKD,EAAME,QAAYF,S,8BCN3BG,G,MAAY,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,SAAUN,EAAa,EAAbA,OAEpC,EAA4CO,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAgCF,mBAAS,CACvChB,MAAO,GACPC,YAAa,GACbC,OAAQ,GACRC,QAAS,GACTU,OAAQ,KALV,mBAAOM,EAAP,KAAiBC,EAAjB,KAOA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAkCR,oBAAS,GAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KAEMC,EAAY,WAChBP,EAAY,CACVpB,MAAO,GACPC,YAAa,GACbC,OAAQ,GACRC,QAAS,GACTU,OAAQ,KAEVK,EAAkB,KAGdU,EAAQ,uCAAG,sCAAAC,EAAA,6DACfH,GAAa,GACPI,EAFS,UAxBJ,+CAwBI,OAEUb,GAFV,SAGIc,MAAMD,GAAKE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAHzC,OAGTC,EAHS,OAIPC,EAAwBD,EAAxBC,MAAOC,EAAiBF,EAAjBE,KAAMC,EAAWH,EAAXG,OAGrBC,EAAqB,SAFfA,EAAWJ,EAAXI,QAEG,2DAELA,EAEkB,UAAlBJ,EAAKK,UACPhB,GAAa,GACbG,MAEAH,GAAa,GACbJ,EAAY,CACVpB,MAAOoC,EACPnC,YAAaoC,EACbnC,OAAQqC,EACRpC,QAAQ,8BAAD,OAAgCmC,GACvCzB,OAAQyB,KArBG,2CAAH,qDAwCd,OACE,oCACE,0BAAMlC,UAAU,cACd,yBAAKA,UAAU,SACb,2BAAOA,UAAU,QAAQqC,QAAQ,eAAjC,eAIA,yBAAKrC,UAAU,WACb,2BACEsC,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZxC,UAAU,kBACVyC,MAAO5B,EACP6B,SAAU,SAACC,GACTvB,GAAa,GACbF,GAAY,GACZJ,EAAkB6B,EAAEC,OAAOH,WAKhCtB,GACC,uBAAGnB,UAAU,kBAAb,wCAIDqB,GACC,uBAAGrB,UAAU,kBAAb,8BAMJ,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,WACb,4BACEsC,KAAK,SACLtC,UAAU,kBACV6C,QAASrB,GAHX,iBASF,yBAAKxB,UAAU,WACb,4BACEsC,KAAK,SACLtC,UAAU,oBACV6C,QAhEO,WACjBzB,GAAa,GACU,KAAnBP,EACFS,GAAa,GACJjB,EAAOyC,MAAK,SAAAvC,GAAK,OAAIA,EAAME,SAAWM,EAASN,UACxDS,GAAY,IAEZP,GAAS,SAAAoC,GAAI,4BACPA,GADO,CACDhC,OACZQ,IACAL,GAAY,MAmDN,sBAUe,KAApBH,EAASN,QACV,yBAAKT,UAAU,aACb,wBAAIA,UAAU,SAAd,UAEGiB,GACD,0BACE+B,MAAO,CACLC,MAAO,MACPC,SAAU,SAGZ,6BANF,6BAWF,kBAAC,EAAD,CACEtD,MAAOmB,EAASnB,MAChBC,YAAakB,EAASlB,YACtBC,OAAQiB,EAASjB,OACjBC,QAASgB,EAAShB,QAClBU,OAAQM,EAASN,a,OC9Id0C,EAAM,WACjB,MAA4BvC,mBAASwC,GAArC,mBAAO/C,EAAP,KAAegD,EAAf,KAEA,OACE,yBAAKrD,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAYK,OAAQA,KAEtB,yBAAKL,UAAU,WACb,kBAAC,EAAD,CAAWW,SAAU0C,EAAWhD,OAAQA,OCVhDiD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f90821cc.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './FindMovie.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const FindMovie = ({ addMovie, movies }) => {\n  const API_URL = `https://www.omdbapi.com/?apikey=dfe9f484&t=`;\n  const [searchingTitle, setSearchingTitle] = useState('');\n  const [newMovie, setNewMovie] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n  const [sameFilm, setSameFilm] = useState(false);\n  const [errorLoad, setErrorLoad] = useState(false);\n  const [emptyForm, setEmptyForm] = useState(false);\n\n  const clearForm = () => {\n    setNewMovie({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n    setSearchingTitle('');\n  };\n\n  const loadFilm = async() => {\n    setEmptyForm(false);\n    const url = `${API_URL}${searchingTitle}`;\n    const film = await fetch(url).then(response => response.json());\n    const { Title, Plot, imdbID } = film;\n    let { Poster } = film;\n\n    Poster = (Poster === 'N/A')\n      ? `https://bytes.ua/wp-content/uploads/2017/08/no-image.png`\n      : Poster;\n\n    if (film.Response === 'False') {\n      setErrorLoad(true);\n      clearForm();\n    } else {\n      setErrorLoad(false);\n      setNewMovie({\n        title: Title,\n        description: Plot,\n        imgUrl: Poster,\n        imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n        imdbId: imdbID,\n      });\n    }\n  };\n\n  const onAddMovie = () => {\n    setErrorLoad(false);\n    if (searchingTitle === '') {\n      setEmptyForm(true);\n    } else if (movies.some(movie => movie.imdbId === newMovie.imdbId)) {\n      setSameFilm(true);\n    } else {\n      addMovie(prev => (\n        [...prev, newMovie]));\n      clearForm();\n      setSameFilm(false);\n    }\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-danger\"\n              value={searchingTitle}\n              onChange={(e) => {\n                setErrorLoad(false);\n                setSameFilm(false);\n                setSearchingTitle(e.target.value);\n              }}\n            />\n          </div>\n\n          {errorLoad && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n          {emptyForm && (\n            <p className=\"help is-danger\">\n              Search film before adding\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={loadFilm}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={onAddMovie}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n      {newMovie.imdbId !== '' && (\n      <div className=\"container\">\n        <h2 className=\"title\">\n          Preview\n          {sameFilm && (\n          <span\n            style={{\n              color: 'red',\n              fontSize: '16px',\n            }}\n          >\n            <br />\n            (Has already been added)\n          </span>\n          )}\n        </h2>\n        <MovieCard\n          title={newMovie.title}\n          description={newMovie.description}\n          imgUrl={newMovie.imgUrl}\n          imdbUrl={newMovie.imdbUrl}\n          imdbId={newMovie.imdbId}\n        />\n      </div>\n      )}\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    imgUrl: PropTypes.string.isRequired,\n    imdbUrl: PropTypes.string.isRequired,\n    imdbId: PropTypes.string.isRequired,\n  })).isRequired,\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(data);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie addMovie={setMovies} movies={movies} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}